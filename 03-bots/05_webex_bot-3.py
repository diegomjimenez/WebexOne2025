"""
Webex One 2025 - Exploring the possibilities of Webex APIs

- Adam Weeks
- Diego Manuel Jimenez Moreno
- Phil Bellanti
"""

import os
from dotenv import load_dotenv
from webex_bot.webex_bot import WebexBot  # Import the main WebexBot class.
from webex_bot.models.command import Command  # Import the Command base class for custom commands.
from webex_bot.models.response import Response  # Import Response for sending rich responses like Adaptive Cards.
from webex_bot.formatting import quote_info  # Import quote_info for formatting messages.
from webexpythonsdk import WebexAPI  # Import the Webex API SDK for direct API calls.

# Load environment variables from the .env file.
load_dotenv()

# Webex Bot Token for authentication.
bot_token = os.getenv("BOT_TOKEN")
# Approved domain for bot interactions.
domain = os.getenv("DOMAIN")
# Email address (potentially for specific use cases within commands).

# Create a Webex Bot object.
bot = WebexBot(teams_bot_token=bot_token,  # Authenticate the bot with the provided token.
               bot_name="WebexOne2025",  # Assign a name to the bot.
               approved_domains=domain,  # Restrict bot interaction to users from this domain.
               include_demo_commands=False)  # Exclude default demonstration commands.

class SendMessage(Command):
    """
    This class defines the callback logic for when a user submits the Adaptive Card
    generated by the AskMessage command. It's a 'chained command'.
    """
    def __init__(self):
        # Initialize the command as a callback for the 'message_callback' keyword.
        # delete_previous_message=True removes the Adaptive Card after submission.
        super().__init__(
            card_callback_keyword="message_callback",
            delete_previous_message=True)

    def execute(self, message, attachment_actions, activity):
        """
        Executes when the Adaptive Card is submitted. Extracts the input message
        and sends it back to the user as a direct message.

        Args:
            message (str): The message content (command keyword already stripped, not used here).
            attachment_actions (obj): Object containing details about card actions and inputs.
            activity (obj): Raw activity object from Webex.

        Returns:
            str: A confirmation message to be sent back to the user.
        """
        # Extract the 'message' input from the submitted Adaptive Card.
        message = attachment_actions.inputs.get("message")
        # Get the personId of the user who submitted the card.
        personid = attachment_actions.personId

        # Initialize a WebexAPI client with the bot token to send a message.
        webexbot = WebexAPI(bot_token)
        # Create a direct message to the person using their ID with the extracted message.
        webexbot.messages.create(toPersonId=personid, markdown=message)

        # Return a confirmation message formatted as an info quote.
        return quote_info("Message sent")

class AskMessage(Command):
    """
    This custom bot command presents an Adaptive Card to the user,
    asking them to input a message.
    """
    def __init__(self):
        # Initialize the command with its keyword, help message, and chained command.
        # The SendMessage command will be triggered upon card submission.
        super().__init__(
            command_keyword="message",
            help_message="Send Message",
            chained_commands=[SendMessage()])

    def execute(self, message, attachment_actions, activity):
        """
        Executes the 'message' command. Constructs and sends an Adaptive Card
        to the user for input.

        Args:
            message (str): The message content (command keyword already stripped).
            attachment_actions (obj): Object containing details about card actions.
            activity (obj): Raw activity object from Webex.

        Returns:
            Response: A Response object containing the Adaptive Card to be displayed.
        """
        # Define the Adaptive Card structure for user input.
        card = {
            "contentType": "application/vnd.microsoft.card.adaptive",
            "content": {
                "type": "AdaptiveCard",
                "body": [
                    {
                        "type": "Input.Text",
                        "placeholder": "Message",
                        "id": "message",
                        "isRequired": True,
                        "errorMessage": "Message is required",
                        "label": "Message:"
                    }
                ],
                "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                "version": "1.3",
                "actions": [
                    {
                        "type": "Action.Submit",
                        "title": "Submit",
                        "data": {
                            "callback_keyword": "message_callback" # This links to the SendMessage command.
                        }
                    }
                ]
            }
        }

        # Create a Response object to send the Adaptive Card.
        response = Response()
        response.text = "Please enter your message:" # Fallback text if card fails to render.
        response.attachments = card # Attach the Adaptive Card to the response.

        return response

# Add the custom AskMessage command to the bot.
bot.add_command(AskMessage())

# Start the bot and make it listen for incoming messages.
# This call is typically blocking and keeps the bot running.
bot.run()
