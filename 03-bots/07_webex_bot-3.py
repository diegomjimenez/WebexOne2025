"""
Webex One 2025 - Exploring the possibilities of Webex APIs

- Adam Weeks
- Diego Manuel Jimenez Moreno
- Phil Bellanti
"""

import os
from dotenv import load_dotenv
from webex_bot.webex_bot import WebexBot  # Import the main WebexBot class for creating and managing the bot.
from webex_bot.models.command import Command  # Import the Command base class for creating custom bot commands.
from webex_bot.models.response import Response  # Import Response for sending rich replies, like Adaptive Cards.
from webex_bot.formatting import quote_info  # Import quote_info for formatting messages as quoted text.
from webexpythonsdk import WebexAPI  # Import the Webex API SDK for making direct Webex API calls.

# Load environment variables from the .env file.
load_dotenv()

# Webex Bot Token for authentication with the Webex API.
bot_token = os.getenv("BOT_TOKEN")
# Approved domain for bot interactions, restricting who can interact with the bot.
domain = os.getenv("DOMAIN")
# Email address (potentially for specific use cases within commands, though not directly used at top-level here).
email = os.getenv("EMAIL")

# Create a Webex Bot object.
bot = WebexBot(teams_bot_token=bot_token,         # Authenticate the bot using its token.
               bot_name="WebexOne2025",            # Assign a name to the bot.
               approved_domains=domain,            # Set an approved domain to restrict bot usage.
               include_demo_commands=False)        # Exclude default demonstration commands for a cleaner bot.

class SendMessage(Command):
    """
    This class defines a callback command that processes input from an Adaptive Card.
    It is triggered when a user submits an Adaptive Card generated by the AskMessage command.
    """
    def __init__(self):
        # Initialize the command as a callback for the 'message_callback' keyword.
        # This command is not invoked by a user typing a keyword, but by submitting an Adaptive Card.
        super().__init__(
            card_callback_keyword="message_callback", # The keyword the Adaptive Card's submit action will use.
            delete_previous_message=True)             # Deletes the Adaptive Card message after submission.

    def execute(self, message, attachment_actions, activity):
        """
        Executes when an Adaptive Card with 'callback_keyword': 'message_callback' is submitted.
        It extracts the message input from the card and sends it back to the user as a direct message.

        Args:
            message (str): The message content (command keyword already stripped, not directly used here).
            attachment_actions (obj): Object containing details about card actions and inputs,
                                      including the 'personId' of the user who submitted the card.
            activity (obj): Raw activity object from Webex.

        Returns:
            str: A confirmation message, formatted as an info quote, to be sent back to the user.
        """
        # Extract the 'message' input from the submitted Adaptive Card's inputs.
        message_content = attachment_actions.inputs.get("message")
        # Get the personId of the user who submitted the card from attachment_actions.
        personid = attachment_actions.personId

        # Initialize a WebexAPI client with the bot token to send a message.
        webexbot = WebexAPI(bot_token)
        # Create a direct message to the person using their ID with the extracted message content.
        webexbot.messages.create(toPersonId=personid, markdown=message_content)

        # Return a confirmation message, formatted as an info quote.
        return quote_info("Message sent")

class AskMessage(Command):
    """
    This custom bot command presents an Adaptive Card to the user,
    asking them to input a message. This command is triggered by a typed keyword.
    """
    def __init__(self):
        # Initialize the command with its keyword ("message"), help message, and chained command.
        # Users will type '/message' to invoke this command.
        super().__init__(
            command_keyword="message",      # The keyword users type to activate this command.
            help_message="Send Message",    # The help text displayed for this command.
            chained_commands=[SendMessage()], # Links this command to the SendMessage callback for card submissions.
            delete_previous_message=True)   # Deletes the Adaptive Card message after submission.

    def execute(self, message, attachment_actions, activity):
        """
        Executes the 'message' command. Constructs and sends an Adaptive Card
        to the user for input.

        Args:
            message (str): The message content (command keyword already stripped).
            attachment_actions (obj): Object containing details about card actions (not used directly here).
            activity (obj): Raw activity object from Webex.

        Returns:
            Response: A Response object containing the Adaptive Card to be displayed.
        """
        # Define the Adaptive Card structure for user input.
        card = {
            "contentType": "application/vnd.microsoft.card.adaptive",
            "content": {
                "type": "AdaptiveCard",
                "body": [
                    {
                        "type": "Input.Text",
                        "placeholder": "Message",
                        "id": "message",
                        "isRequired": True,
                        "errorMessage": "Message is required",
                        "label": "Message:"
                    }
                ],
                "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                "version": "1.3",
                "actions": [
                    {
                        "type": "Action.Submit",
                        "title": "Submit",
                        "data": {
                            "callback_keyword": "message_callback" # This links to the SendMessage command.
                        }
                    }
                ]
            }
        }

        # Create a Response object to send the Adaptive Card.
        response = Response()
        response.text = "Please enter your message:" # Fallback text if the card fails to render.
        response.attachments = card # Attach the Adaptive Card to the response.

        return response

# Add the custom SendMessage command to the bot.
# This registers the callback command so it can be triggered by Adaptive Card submissions.
bot.add_command(SendMessage())

# Start the bot and make it listen for incoming messages.
# This call is typically blocking and keeps the bot running, waiting for commands or card submissions.
bot.run()
